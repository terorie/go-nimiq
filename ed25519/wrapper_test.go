package ed25519

import (
	"testing"
	"bytes"
	"math/rand"
)

func TestVerify(t *testing.T) {
	// Valid signature
	valid := Verify(&signature1, message1, &publicKey1)

	if !valid {
		t.Fatal("Failed to verify valid signature.")
	}

	// Invalid signature
	invalid := Verify(&signature2, message1, &publicKey1)

	if invalid {
		t.Fatal("Accepted invalid signature as valid.")
	}
}

func TestPublicKeyDerive(t *testing.T) {
	publicKey := PublicKeyDerive(&privateKey1)
	if !bytes.Equal(publicKey[:], publicKey1[:]) {
		t.Fatal("Invalid public key derived.")
	}
}

func TestSign(t *testing.T) {
	signature := Sign(message1, &publicKey1, &privateKey1)
	if !bytes.Equal(signature[:], signature1[:]) {
		t.Fatal("Invalid signature calculated.")
	}
}

func BenchmarkSign(b *testing.B) {
	// Allocate test data
	privateKeys := make([]PrivateKey, b.N)
	publicKeys := make([]PublicKey, b.N)
	// Ed25519 is hash-then-sign.
	// Message lengths larger than 64 bytes (bc SHA512)
	// wouldn't stress Ed25519 directly but the hash algorithm
	messages := make([][64]byte, b.N)
	signatures := make([]Signature, b.N)

	// Generate random data
	for i := 0; i < b.N; i++ {
		rand.Read(privateKeys[i][:])
		publicKeys[i] = PublicKeyDerive(&privateKeys[i])
		rand.Read(messages[i][:])
	}

	b.ResetTimer()

	// Execute benchmark
	for i := 0; i < b.N; i++ {
		signatures[i] = Sign(messages[i][:], &publicKeys[i], &privateKeys[i])
	}
}

func BenchmarkVerify(b *testing.B) {
	// Allocate test data
	privateKeys := make([]PrivateKey, b.N)
	publicKeys := make([]PublicKey, b.N)
	messages := make([][64]byte, b.N)
	signatures := make([]Signature, b.N)

	// Generate random data
	for i := 0; i < b.N; i++ {
		rand.Read(messages[i][:])
		rand.Read(privateKeys[i][:])
		publicKeys[i] = PublicKeyDerive(&privateKeys[i])
		signatures[i] = Sign(messages[i][:], &publicKeys[i], &privateKeys[i])
	}

	b.ResetTimer()

	// Execute benchmark
	for i := 0; i < b.N; i++ {
		Verify(&signatures[i], messages[i][:], &publicKeys[i])
	}
}

// Constant test data

var message1 = []byte{
	0x31, 0x76, 0x31, 0x20, 0x6d, 0x65, 0x20, 0x54,
	0x65, 0x72, 0x72, 0x61, 0x72, 0x69, 0x61,
}

var publicKey1 = PublicKey{
	0x75, 0xa4, 0xb9, 0xa1, 0x7b, 0x68, 0x57, 0xca,
	0x7d, 0x17, 0xee, 0x9b, 0xcd, 0x36, 0xb3, 0x6e,
	0x6d, 0xf5, 0x22, 0x1e, 0x5f, 0x36, 0xfa, 0x69,
	0x73, 0xd6, 0x4d, 0x57, 0x9c, 0xd2, 0x55, 0x51,
}

var privateKey1 = PrivateKey{
	0x33, 0x71, 0x4b, 0x23, 0x98, 0x3b, 0xea, 0x98,
	0xd0, 0x5e, 0xd4, 0x75, 0x31, 0xb6, 0x5d, 0x7b,
	0x91, 0xc0, 0xe9, 0x3a, 0x4b, 0xb2, 0x44, 0x46,
	0x15, 0x31, 0x37, 0x7e, 0x1e, 0x39, 0xc9, 0xe8,
	0x75, 0xa4, 0xb9, 0xa1, 0x7b, 0x68, 0x57, 0xca,
	0x7d, 0x17, 0xee, 0x9b, 0xcd, 0x36, 0xb3, 0x6e,
	0x6d, 0xf5, 0x22, 0x1e, 0x5f, 0x36, 0xfa, 0x69,
	0x73, 0xd6, 0x4d, 0x57, 0x9c, 0xd2, 0x55, 0x51,
}

var signature1 = Signature{
	0x0b, 0xb4, 0x24, 0xdb, 0xc7, 0xc5, 0x9c, 0x5c,
	0xe6, 0x11, 0x3a, 0x2f, 0x93, 0x80, 0x0e, 0x10,
	0xb6, 0x9d, 0x38, 0x8e, 0x37, 0x08, 0x65, 0xa6,
	0xfd, 0x05, 0x41, 0x71, 0x72, 0x66, 0xb9, 0x38,
	0x4e, 0x27, 0x3f, 0x4c, 0x2f, 0xbd, 0x7e, 0xe6,
	0x09, 0x10, 0xfb, 0xce, 0x74, 0xcf, 0x72, 0xf1,
	0x67, 0xc9, 0x24, 0x06, 0x1e, 0xbc, 0x96, 0x00,
	0x72, 0xc1, 0xec, 0x90, 0x53, 0x77, 0x26, 0x09,
}

var signature2 = Signature{
	0x09, 0x96, 0xb5, 0x76, 0x79, 0xc4, 0x7a, 0xc9,
	0x72, 0x6d, 0x6f, 0x98, 0xa1, 0x3b, 0xa2, 0x52,
	0x75, 0xd0, 0x81, 0xef, 0x99, 0x7c, 0xaf, 0xf3,
	0x0f, 0xf0, 0x41, 0x52, 0x45, 0x34, 0xdb, 0xbe,
	0xb2, 0x7b, 0x33, 0x1c, 0x73, 0xd9, 0x3a, 0x40,
	0x82, 0x76, 0xf7, 0x53, 0xaa, 0x76, 0xb4, 0x22,
	0x8f, 0xa8, 0x32, 0x59, 0x82, 0xb8, 0x42, 0xea,
	0x86, 0x96, 0x2d, 0x29, 0xa6, 0x0c, 0x40, 0x04,
}
