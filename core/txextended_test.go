package core

import (
	"testing"
	"bytes"
)

func TestExtendedTx_Deserialize(t *testing.T) {
	buf := []byte {
		// Tx format (Extended)
		0x01,
		// Data size (32)
		0x00, 0x20,
		// Data
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
		// Sender
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
		// Sender type (Basic)
		0x00,
		// Recipient
		0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
		0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
		// Recipient type (Basic)
		0x00,
		// Value
		0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
		// Fee
		0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
		// Validity start height
		0x90, 0x91, 0x92, 0x93,
		// Network ID (Main)
		42,
		// Flags (None)
		0x00,
		// Proof size (32)
		0x00, 0x20,
		// Proof
		0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
		0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
	}

	// Simulate reading from network
	r := bytes.NewReader(buf)

	txi, err := DeserializeTx(r)

	if err != nil {
		t.Fatal(err)
	}

	if txi.Format() != TxFormatExtended {
		t.Fatalf("Deserialized tx format not extended: 0x%x", txi.Format())
	}

	tx := txi.(*ExtendedTx)

	// Check data len + content
	data := []byte{
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	}

	if !bytes.Equal(tx.Data, data) {
		t.Fatal("Failed deserializing data part.")
	}

	sender := Address{
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
	}

	if !bytes.Equal(tx.Sender[:], sender[:]) {
		t.Fatal("Failed deserializing Sender.")
	}

	if tx.SenderType != BasicAccount {
		t.Fatal("Failed deserializing SenderType.")
	}

	recipient := Address{
		0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
		0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
	}

	if !bytes.Equal(tx.Recipient[:], recipient[:]) {
		t.Fatal("Failed deserializing Recipient.")
	}

	if tx.RecipientType != BasicAccount {
		t.Fatal("Failed deserializing RecipientType.")
	}
	
	if tx.Value != 0x7071727374757677 {
		t.Fatal("Failed deserializing Value.")
	}

	if tx.Fee != 0x8081828384858687 {
		t.Fatal("Failed deserializing Fee.")
	}
	
	if tx.ValidityStartHeight != 0x90919293 {
		t.Fatal("Failed deserializing ValidityStartHeight.")
	}

	if tx.NetworkId != 42 {
		t.Fatal("Failed deserializing NetworkId.")
	}

	if tx.Flags != 0 {
		t.Fatal("Failed deserializing Flags.")
	}

	proof := []byte{
		0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
		0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
	}

	if !bytes.Equal(tx.Proof, proof) {
		t.Fatal("Failed deserializing Proof.")
	}

}
